//Class Notes from 5 March 2018 - Intro to Image Board Project

4 main parts to the project, 3 are high priority, 4th is more of a bonus but we should do it.
1 and 2 are straight forward, but part 2 is mostly image upload.
Part 3 is hard/big.

In index.js our routes will only be sending back JSON because it is a single page application

//Part 1:


v for thru each of the images and print out an element for each image.

when you do query to get the images out of the database:
function getImages() {
    db.query(`SELECT * FROM IMAGES ORDER BY created_at DESC`).then({rows} => {
        rows.forEach(function(image) {
            image.image = config.s3 + image.image
        })
    }
}
//later we will need to change the query to be:
function getImages(lastShownImageID) {
    db.query(`SELECT * FROM IMAGES LIMIT 10 ORDER BY created_at DESC WHERE id < $1`).then({rows} => {
        rows.forEach(function(image) {
            image.image = config.s3 + image.image
        })
    }
}

run sql query
then put it in a route to res.json
then make view instance when it mounts

set a property on itself and as soon as it is set, then view should
automatically update to show each of the images

image should be scaled down
with title
on a grid (flexbox or css grid);

in html is a big div where we set properties in our vue instance that causes it to display

//Part 2 Notes:
add the form for upload.
If you move on, then stop at the upload button next. We will talk about that tomorrow.

//Part 2:

After you do an upload, you might want to delete the file from uploads

//Part 3: Notes

for adding comment, need a post route,
need a query to get all the comments for an image by image id.
You may want a route that gets all the data about the image and one to get the comments.
When it has both, then bundles them all and sends them back
show all data for the image and all the comments.

create a comments table, which needs columns: comment, username, image id, timestamp.

this will be a component, what should happen is that in your html...

make single image appear and pass to it the data to show the right stuff.
make the div invisible at first.
better to give single-image component the image id
Pass it the id of the image, the user clicked on.  Nothing else.
component should have mounted function that getsID prop and gets the data for that one image.
Then once received it can show all the data.

In main vue instance,

SelectedImage is set to the id of the image the user clicked.
in single image, component, have it only show if there if the image is selected,
and if so then pass it the id of the selected image.

people made a component just for the comment and looped through.

template for the component contains everything on the screen.
need to be possible to close the modal with an x or click outside of the modal and it closes.
Either way, the component is not able to close itself.
the component cannot change the parent's selected image property.  The parent would have to do that.
THe parent would have to listen for an event, the child needs to emit an event/message to the parent.
and tell the parent its time to close the modal.
set the selectedImage to null and the modal will disappear.

comments will be very similar to how images work
form on page
make a post request to the server
simpler because you don't have to do form data stuff.

axios.post("/comment", {
    username:
})

don't need form data stuff.
can copy the whole flow for images for the comments

use css to make single image pop up.
can also do a css transition.
vue has some built in transition stuff
v-transition enter/leave & list transitions

//call vue component and make single image component. associate a single template.
make a template.
don't have a v-if so that it always shows.
then make css to make it the way you want.
Then add the v-if to hide it.

<!-- <single-image v-if="selectedImage" v-bind:id="selectedImage" v:on:close="closeModal"></single-image> -->


//Part 1 Notes on 8 March

add limit to getimage and add a get more button or infinite scroll.
Make an ajax request to tell it where to start to get the next 12.

do with WHERE clause.

SELECT * FROM images WHERE id < $1 ORDER BY id DESC
Grab the id of the last image in the list.
get the next 12 images that are less than the id of the last one.
can create a getinitialimages and then a getmoreimages.

When you reach the end, there might be a problem.
When you show the image with the lowest id, if you get no results, then hide it.
as long as id is > 1 then show the button.

do infinite scroll because it is a better user experience than the more button.

if document.body.scrollTop and window.innerHeight is equal to equal.body.scrollHeight.
document.body.scrollTop is the current top position
woudl be in a script.js

time to start listening is when the first results get put in the page.


//Part4 Notes on March 8
